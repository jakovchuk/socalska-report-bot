import os
import logging
import threading
from flask import Flask, request
import telegram
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    Dispatcher,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)

# ====== ENV VARS ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")

if not BOT_TOKEN or not CHANNEL_ID:
    raise RuntimeError("BOT_TOKEN and CHANNEL_ID must be set as env vars!")

# ====== Telegram setup ======
bot = telegram.Bot(token=BOT_TOKEN)
# Use a Dispatcher without a Queue (sufficient for light‚Äëweight bots via webhook)
dispatcher = Dispatcher(bot=bot, update_queue=None, use_context=True)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== Conversation states ======
PREACH, STUDIES, HOURS, COMMENT = range(4)

# ====== Handler callbacks ======

def start(update: Update, context: CallbackContext):
    """Send a button to begin the report."""
    keyboard = [[InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="start_report")]]
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç.",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


def start_report_cb(update: Update, context: CallbackContext):
    """Entry‚Äëpoint after the user presses the main button."""
    query = update.callback_query
    query.answer()
    # Reset per‚Äëuser data
    context.user_data.clear()
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data="preach_yes"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="preach_no"),
        ]
    ]
    query.edit_message_text(
        "1Ô∏è‚É£ –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –ª–∏ –≤—ã –≤ –ø—Ä–æ–ø–æ–≤–µ–¥–∏?", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PREACH


def preach_answer_cb(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    participated = query.data == "preach_yes"
    context.user_data["preach"] = "–î–∞" if participated else "–ù–µ—Ç"

    if not participated:
        # Skip rest, send report immediately
        context.user_data["studies"] = "‚Äë"
        context.user_data["hours"] = "‚Äë"
        context.user_data["comment"] = "‚Äë"
        send_report(update.effective_user, context)
        query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return ConversationHandler.END

    # Ask for number of studies
    query.edit_message_text("2Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–µ–Ω–∏–π (1‚Äë10):")
    return STUDIES


def studies_msg(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    if not text.isdigit() or not (1 <= int(text) <= 10):
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return STUDIES
    context.user_data["studies"] = text
    update.message.reply_text("3Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (0‚Äë100):")
    return HOURS


def hours_msg(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    if not text.isdigit() or not (0 <= int(text) <= 100):
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        return HOURS
    context.user_data["hours"] = text
    update.message.reply_text("4Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ ""-"" –µ—Å–ª–∏ –Ω–µ—Ç):")
    return COMMENT


def comment_msg(update: Update, context: CallbackContext):
    context.user_data["comment"] = update.message.text.strip() or "‚Äë"
    send_report(update.effective_user, context)
    update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    return ConversationHandler.END


def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–û—Ç—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


def send_report(user, context: CallbackContext):
    """Compose and forward the report to the channel in a thread to keep webhook fast."""

    def _send():
        ud = context.user_data
        msg = (
            f"üìù –û—Ç—á—ë—Ç –æ—Ç {user.full_name} (@{user.username})\n\n"
            f"–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–ø–æ–≤–µ–¥–∏: {ud['preach']}\n"
            f"–ò–∑—É—á–µ–Ω–∏–π: {ud['studies']}\n"
            f"–ß–∞—Å—ã: {ud['hours']}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {ud['comment']}"
        )
        bot.send_message(chat_id=CHANNEL_ID, text=msg)

    threading.Thread(target=_send).start()


# ====== Register handlers ======
conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_report_cb, pattern="^start_report$")],
    states={
        PREACH: [CallbackQueryHandler(preach_answer_cb, pattern="^preach_(yes|no)$")],
        STUDIES: [MessageHandler(Filters.text & ~Filters.command, studies_msg)],
        HOURS: [MessageHandler(Filters.text & ~Filters.command, hours_msg)],
        COMMENT: [MessageHandler(Filters.text & ~Filters.command, comment_msg)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True,
)

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(conv)

# ====== Flask webhook ======
app = Flask(__name__)

@app.route(f"/{WEBHOOK_SECRET}", methods=["POST"])
def webhook():
    update = telegram.Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok"

@app.route("/ping")
def ping():
    return "pong"

# Entry point for Render local testing (optional)
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    app.run(host="0.0.0.0", port=port)
